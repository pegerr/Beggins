/*Nap√≠≈°te program na rie≈°enie kvadratick√Ωch rovn√≠c (pou≈æite if, else if a else).
‚Ä¢ ak D > 0, tak dan√° kvadratick√° rovnica m√° 2 r√¥zne re√°lne korene
‚Ä¢ ak D = 0, tak dan√° kvadratick√° rovnica m√° dva rovnak√© re√°lne korene,
ƒçi≈æe tzv. dvojn√°sobn√Ω re√°lny kore≈à
‚Ä¢ ak D < 0, tak dan√° kvadratick√° rovnica nem√° rie≈°enie v obore re√°lnych
ƒç√≠sel (samozrejme v obore komplexn√Ωch ƒç√≠sel m√° dva imagin√°rne
komplexne zdru≈æen√© korene)
Pom√¥cka: ùë•1,2 =
‚àíùëè¬±‚àöùê∑
2ùëé
; ùê∑ = ùëè
2 ‚àí 4ùëéùëê
Vstup testovac√≠ch √∫dajov
Vstup a: 1
Vstup b: 5
Vstup c: 1
Oƒçak√°van√Ω v√Ωstup :
Korene s√∫ -0,20871215252208009 a -4,7912878474779195*/

import java.util.Scanner;

public class vetvenie2_2 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Vstup a: ");
        double a = scanner.nextDouble();

        System.out.print("Vstup b: ");
        double b = scanner.nextDouble();

        System.out.print("Vstup c: ");
        double c = scanner.nextDouble();

        double discriminant = b * b - 4 * a * c;

        if (discriminant > 0) {
            double x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
            double x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
            System.out.println("Korene s√∫ " + x1 + " a " + x2);
        } else if (discriminant == 0) {
            double x1 = -b / (2 * a);
            System.out.println("Korene s√∫ " + x1 + " (dvojn√°sobn√Ω re√°lny kore≈à)");
        } else {
            System.out.println("Kvadratick√° rovnica nem√° rie≈°enie v obore re√°lnych ƒç√≠sel.");
        }

        scanner.close();
    }
}

